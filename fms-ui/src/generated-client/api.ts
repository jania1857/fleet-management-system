/* tslint:disable */
/* eslint-disable */
/**
 * Fleet Management System API Documentation
 * Dokumentacja API - autoryzacja za pomocÄ… JWT
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface AssignmentDto
 */
export interface AssignmentDto {
    /**
     * 
     * @type {number}
     * @memberof AssignmentDto
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof AssignmentDto
     */
    'startTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof AssignmentDto
     */
    'endTime'?: string;
    /**
     * 
     * @type {number}
     * @memberof AssignmentDto
     */
    'vehicleId'?: number;
    /**
     * 
     * @type {number}
     * @memberof AssignmentDto
     */
    'userId'?: number;
}
/**
 * 
 * @export
 * @interface AuthenticationRequest
 */
export interface AuthenticationRequest {
    /**
     * 
     * @type {string}
     * @memberof AuthenticationRequest
     */
    'username'?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthenticationRequest
     */
    'password'?: string;
}
/**
 * 
 * @export
 * @interface AuthenticationResponse
 */
export interface AuthenticationResponse {
    /**
     * 
     * @type {string}
     * @memberof AuthenticationResponse
     */
    'token'?: string;
    /**
     * 
     * @type {UserDto}
     * @memberof AuthenticationResponse
     */
    'userData'?: UserDto;
}
/**
 * 
 * @export
 * @interface ChangePasswordRequest
 */
export interface ChangePasswordRequest {
    /**
     * 
     * @type {string}
     * @memberof ChangePasswordRequest
     */
    'oldPassword'?: string;
    /**
     * 
     * @type {string}
     * @memberof ChangePasswordRequest
     */
    'newPassword'?: string;
    /**
     * 
     * @type {string}
     * @memberof ChangePasswordRequest
     */
    'confirmPassword'?: string;
}
/**
 * 
 * @export
 * @interface ChangeStatusRequest
 */
export interface ChangeStatusRequest {
    /**
     * 
     * @type {string}
     * @memberof ChangeStatusRequest
     */
    'newStatus'?: ChangeStatusRequestNewStatusEnum;
}

export const ChangeStatusRequestNewStatusEnum = {
    Ready: 'READY',
    Assigned: 'ASSIGNED',
    RequiresAttention: 'REQUIRES_ATTENTION',
    Bad: 'BAD',
    Service: 'SERVICE'
} as const;

export type ChangeStatusRequestNewStatusEnum = typeof ChangeStatusRequestNewStatusEnum[keyof typeof ChangeStatusRequestNewStatusEnum];

/**
 * 
 * @export
 * @interface ChangeStatusResponse
 */
export interface ChangeStatusResponse {
    /**
     * 
     * @type {number}
     * @memberof ChangeStatusResponse
     */
    'vehicleId'?: number;
    /**
     * 
     * @type {string}
     * @memberof ChangeStatusResponse
     */
    'newStatus'?: ChangeStatusResponseNewStatusEnum;
}

export const ChangeStatusResponseNewStatusEnum = {
    Ready: 'READY',
    Assigned: 'ASSIGNED',
    RequiresAttention: 'REQUIRES_ATTENTION',
    Bad: 'BAD',
    Service: 'SERVICE'
} as const;

export type ChangeStatusResponseNewStatusEnum = typeof ChangeStatusResponseNewStatusEnum[keyof typeof ChangeStatusResponseNewStatusEnum];

/**
 * 
 * @export
 * @interface ChangeUserDataRequest
 */
export interface ChangeUserDataRequest {
    /**
     * 
     * @type {string}
     * @memberof ChangeUserDataRequest
     */
    'firstname'?: string;
    /**
     * 
     * @type {string}
     * @memberof ChangeUserDataRequest
     */
    'lastname'?: string;
}
/**
 * 
 * @export
 * @interface ChangeUserRoleRequest
 */
export interface ChangeUserRoleRequest {
    /**
     * 
     * @type {string}
     * @memberof ChangeUserRoleRequest
     */
    'newRole'?: ChangeUserRoleRequestNewRoleEnum;
}

export const ChangeUserRoleRequestNewRoleEnum = {
    Admin: 'ADMIN',
    Manager: 'MANAGER',
    Driver: 'DRIVER'
} as const;

export type ChangeUserRoleRequestNewRoleEnum = typeof ChangeUserRoleRequestNewRoleEnum[keyof typeof ChangeUserRoleRequestNewRoleEnum];

/**
 * 
 * @export
 * @interface CostDto
 */
export interface CostDto {
    /**
     * 
     * @type {number}
     * @memberof CostDto
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof CostDto
     */
    'amount'?: number;
    /**
     * 
     * @type {number}
     * @memberof CostDto
     */
    'refuelingId'?: number;
    /**
     * 
     * @type {number}
     * @memberof CostDto
     */
    'inspectionId'?: number;
    /**
     * 
     * @type {number}
     * @memberof CostDto
     */
    'serviceId'?: number;
    /**
     * 
     * @type {number}
     * @memberof CostDto
     */
    'insuranceId'?: number;
    /**
     * 
     * @type {string}
     * @memberof CostDto
     */
    'timestamp'?: string;
}
/**
 * 
 * @export
 * @interface CreateUserRequest
 */
export interface CreateUserRequest {
    /**
     * 
     * @type {string}
     * @memberof CreateUserRequest
     */
    'firstname'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateUserRequest
     */
    'lastname'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateUserRequest
     */
    'role'?: CreateUserRequestRoleEnum;
}

export const CreateUserRequestRoleEnum = {
    Admin: 'ADMIN',
    Manager: 'MANAGER',
    Driver: 'DRIVER'
} as const;

export type CreateUserRequestRoleEnum = typeof CreateUserRequestRoleEnum[keyof typeof CreateUserRequestRoleEnum];

/**
 * 
 * @export
 * @interface CreateVehicleRequest
 */
export interface CreateVehicleRequest {
    /**
     * 
     * @type {string}
     * @memberof CreateVehicleRequest
     */
    'manufacturer'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateVehicleRequest
     */
    'model'?: string;
    /**
     * 
     * @type {number}
     * @memberof CreateVehicleRequest
     */
    'year'?: number;
    /**
     * 
     * @type {string}
     * @memberof CreateVehicleRequest
     */
    'registrationNumber'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateVehicleRequest
     */
    'vin'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateVehicleRequest
     */
    'fuelType'?: CreateVehicleRequestFuelTypeEnum;
    /**
     * 
     * @type {number}
     * @memberof CreateVehicleRequest
     */
    'displacement'?: number;
    /**
     * 
     * @type {number}
     * @memberof CreateVehicleRequest
     */
    'mileage'?: number;
    /**
     * 
     * @type {string}
     * @memberof CreateVehicleRequest
     */
    'insuranceStart'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateVehicleRequest
     */
    'insuranceEnd'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateVehicleRequest
     */
    'insuranceType'?: CreateVehicleRequestInsuranceTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof CreateVehicleRequest
     */
    'insuranceNumber'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateVehicleRequest
     */
    'insurer'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateVehicleRequest
     */
    'inspectionDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateVehicleRequest
     */
    'nextInspectionDate'?: string;
}

export const CreateVehicleRequestFuelTypeEnum = {
    Gasoline: 'GASOLINE',
    Diesel: 'DIESEL',
    Electric: 'ELECTRIC',
    DieselHybrid: 'DIESEL_HYBRID',
    GasolineHybrid: 'GASOLINE_HYBRID',
    Lpg: 'LPG'
} as const;

export type CreateVehicleRequestFuelTypeEnum = typeof CreateVehicleRequestFuelTypeEnum[keyof typeof CreateVehicleRequestFuelTypeEnum];
export const CreateVehicleRequestInsuranceTypeEnum = {
    Oc: 'OC',
    Ac: 'AC'
} as const;

export type CreateVehicleRequestInsuranceTypeEnum = typeof CreateVehicleRequestInsuranceTypeEnum[keyof typeof CreateVehicleRequestInsuranceTypeEnum];

/**
 * 
 * @export
 * @interface GeneratedUserCredentialsResponse
 */
export interface GeneratedUserCredentialsResponse {
    /**
     * 
     * @type {string}
     * @memberof GeneratedUserCredentialsResponse
     */
    'username'?: string;
    /**
     * 
     * @type {string}
     * @memberof GeneratedUserCredentialsResponse
     */
    'generatedPassword'?: string;
}
/**
 * 
 * @export
 * @interface InspectionDto
 */
export interface InspectionDto {
    /**
     * 
     * @type {number}
     * @memberof InspectionDto
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof InspectionDto
     */
    'inspectionDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof InspectionDto
     */
    'nextInspectionDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof InspectionDto
     */
    'description'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof InspectionDto
     */
    'passed'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof InspectionDto
     */
    'vehicleId'?: number;
    /**
     * 
     * @type {CostDto}
     * @memberof InspectionDto
     */
    'cost'?: CostDto;
}
/**
 * 
 * @export
 * @interface InsuranceDto
 */
export interface InsuranceDto {
    /**
     * 
     * @type {number}
     * @memberof InsuranceDto
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof InsuranceDto
     */
    'type'?: InsuranceDtoTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof InsuranceDto
     */
    'number'?: string;
    /**
     * 
     * @type {string}
     * @memberof InsuranceDto
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof InsuranceDto
     */
    'insurer'?: string;
    /**
     * 
     * @type {string}
     * @memberof InsuranceDto
     */
    'startDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof InsuranceDto
     */
    'endDate'?: string;
    /**
     * 
     * @type {number}
     * @memberof InsuranceDto
     */
    'vehicleId'?: number;
    /**
     * 
     * @type {CostDto}
     * @memberof InsuranceDto
     */
    'cost'?: CostDto;
}

export const InsuranceDtoTypeEnum = {
    Oc: 'OC',
    Ac: 'AC'
} as const;

export type InsuranceDtoTypeEnum = typeof InsuranceDtoTypeEnum[keyof typeof InsuranceDtoTypeEnum];

/**
 * 
 * @export
 * @interface MileageChangeDto
 */
export interface MileageChangeDto {
    /**
     * 
     * @type {number}
     * @memberof MileageChangeDto
     */
    'id': number;
    /**
     * 
     * @type {number}
     * @memberof MileageChangeDto
     */
    'newMileage'?: number;
    /**
     * 
     * @type {number}
     * @memberof MileageChangeDto
     */
    'vehicleId'?: number;
}
/**
 * 
 * @export
 * @interface NewInspectionRequest
 */
export interface NewInspectionRequest {
    /**
     * 
     * @type {string}
     * @memberof NewInspectionRequest
     */
    'inspectionDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof NewInspectionRequest
     */
    'description'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof NewInspectionRequest
     */
    'passed'?: boolean;
}
/**
 * 
 * @export
 * @interface NewInsuranceRequest
 */
export interface NewInsuranceRequest {
    /**
     * 
     * @type {string}
     * @memberof NewInsuranceRequest
     */
    'insuranceType'?: NewInsuranceRequestInsuranceTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof NewInsuranceRequest
     */
    'number'?: string;
    /**
     * 
     * @type {string}
     * @memberof NewInsuranceRequest
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof NewInsuranceRequest
     */
    'insurer'?: string;
    /**
     * 
     * @type {string}
     * @memberof NewInsuranceRequest
     */
    'startDate'?: string;
    /**
     * 
     * @type {number}
     * @memberof NewInsuranceRequest
     */
    'cost'?: number;
}

export const NewInsuranceRequestInsuranceTypeEnum = {
    Oc: 'OC',
    Ac: 'AC'
} as const;

export type NewInsuranceRequestInsuranceTypeEnum = typeof NewInsuranceRequestInsuranceTypeEnum[keyof typeof NewInsuranceRequestInsuranceTypeEnum];

/**
 * 
 * @export
 * @interface NewMileageChangeRequest
 */
export interface NewMileageChangeRequest {
    /**
     * 
     * @type {number}
     * @memberof NewMileageChangeRequest
     */
    'newMileage'?: number;
}
/**
 * 
 * @export
 * @interface NewRefuelingRequest
 */
export interface NewRefuelingRequest {
    /**
     * 
     * @type {string}
     * @memberof NewRefuelingRequest
     */
    'fuel'?: NewRefuelingRequestFuelEnum;
    /**
     * 
     * @type {number}
     * @memberof NewRefuelingRequest
     */
    'price'?: number;
    /**
     * 
     * @type {number}
     * @memberof NewRefuelingRequest
     */
    'quantity'?: number;
    /**
     * 
     * @type {number}
     * @memberof NewRefuelingRequest
     */
    'amount'?: number;
}

export const NewRefuelingRequestFuelEnum = {
    Gasoline: 'GASOLINE',
    Diesel: 'DIESEL',
    Electricity: 'ELECTRICITY'
} as const;

export type NewRefuelingRequestFuelEnum = typeof NewRefuelingRequestFuelEnum[keyof typeof NewRefuelingRequestFuelEnum];

/**
 * 
 * @export
 * @interface NewServiceRequest
 */
export interface NewServiceRequest {
    /**
     * 
     * @type {string}
     * @memberof NewServiceRequest
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof NewServiceRequest
     */
    'description'?: string;
    /**
     * 
     * @type {number}
     * @memberof NewServiceRequest
     */
    'mileageAtTheTime'?: number;
    /**
     * 
     * @type {number}
     * @memberof NewServiceRequest
     */
    'cost'?: number;
}
/**
 * 
 * @export
 * @interface RefuelingDto
 */
export interface RefuelingDto {
    /**
     * 
     * @type {number}
     * @memberof RefuelingDto
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof RefuelingDto
     */
    'fuel'?: RefuelingDtoFuelEnum;
    /**
     * 
     * @type {number}
     * @memberof RefuelingDto
     */
    'price'?: number;
    /**
     * 
     * @type {number}
     * @memberof RefuelingDto
     */
    'quantity'?: number;
    /**
     * 
     * @type {number}
     * @memberof RefuelingDto
     */
    'amount'?: number;
    /**
     * 
     * @type {string}
     * @memberof RefuelingDto
     */
    'timestamp'?: string;
    /**
     * 
     * @type {number}
     * @memberof RefuelingDto
     */
    'vehicleId'?: number;
    /**
     * 
     * @type {CostDto}
     * @memberof RefuelingDto
     */
    'cost'?: CostDto;
}

export const RefuelingDtoFuelEnum = {
    Gasoline: 'GASOLINE',
    Diesel: 'DIESEL',
    Electricity: 'ELECTRICITY'
} as const;

export type RefuelingDtoFuelEnum = typeof RefuelingDtoFuelEnum[keyof typeof RefuelingDtoFuelEnum];

/**
 * 
 * @export
 * @interface ServiceDto
 */
export interface ServiceDto {
    /**
     * 
     * @type {number}
     * @memberof ServiceDto
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ServiceDto
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof ServiceDto
     */
    'description'?: string;
    /**
     * 
     * @type {number}
     * @memberof ServiceDto
     */
    'mileageAtTheTime'?: number;
    /**
     * 
     * @type {number}
     * @memberof ServiceDto
     */
    'vehicleId'?: number;
    /**
     * 
     * @type {CostDto}
     * @memberof ServiceDto
     */
    'cost'?: CostDto;
}
/**
 * 
 * @export
 * @interface StatusChangeDto
 */
export interface StatusChangeDto {
    /**
     * 
     * @type {number}
     * @memberof StatusChangeDto
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof StatusChangeDto
     */
    'newStatus'?: StatusChangeDtoNewStatusEnum;
    /**
     * 
     * @type {string}
     * @memberof StatusChangeDto
     */
    'timestamp'?: string;
    /**
     * 
     * @type {number}
     * @memberof StatusChangeDto
     */
    'vehicleId'?: number;
}

export const StatusChangeDtoNewStatusEnum = {
    Ready: 'READY',
    Assigned: 'ASSIGNED',
    RequiresAttention: 'REQUIRES_ATTENTION',
    Bad: 'BAD',
    Service: 'SERVICE'
} as const;

export type StatusChangeDtoNewStatusEnum = typeof StatusChangeDtoNewStatusEnum[keyof typeof StatusChangeDtoNewStatusEnum];

/**
 * 
 * @export
 * @interface UpdateCostRequest
 */
export interface UpdateCostRequest {
    /**
     * 
     * @type {number}
     * @memberof UpdateCostRequest
     */
    'amount'?: number;
}
/**
 * 
 * @export
 * @interface UpdateInspectionRequest
 */
export interface UpdateInspectionRequest {
    /**
     * 
     * @type {string}
     * @memberof UpdateInspectionRequest
     */
    'inspectionDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateInspectionRequest
     */
    'nextInspectionDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateInspectionRequest
     */
    'description'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof UpdateInspectionRequest
     */
    'passed'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof UpdateInspectionRequest
     */
    'cost'?: number;
}
/**
 * 
 * @export
 * @interface UpdateInsuranceRequest
 */
export interface UpdateInsuranceRequest {
    /**
     * 
     * @type {string}
     * @memberof UpdateInsuranceRequest
     */
    'insuranceType'?: UpdateInsuranceRequestInsuranceTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof UpdateInsuranceRequest
     */
    'number'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateInsuranceRequest
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateInsuranceRequest
     */
    'insurer'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateInsuranceRequest
     */
    'startDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateInsuranceRequest
     */
    'endDate'?: string;
    /**
     * 
     * @type {number}
     * @memberof UpdateInsuranceRequest
     */
    'cost'?: number;
}

export const UpdateInsuranceRequestInsuranceTypeEnum = {
    Oc: 'OC',
    Ac: 'AC'
} as const;

export type UpdateInsuranceRequestInsuranceTypeEnum = typeof UpdateInsuranceRequestInsuranceTypeEnum[keyof typeof UpdateInsuranceRequestInsuranceTypeEnum];

/**
 * 
 * @export
 * @interface UpdateServiceRequest
 */
export interface UpdateServiceRequest {
    /**
     * 
     * @type {string}
     * @memberof UpdateServiceRequest
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateServiceRequest
     */
    'description'?: string;
    /**
     * 
     * @type {number}
     * @memberof UpdateServiceRequest
     */
    'mileageAtTheTime'?: number;
    /**
     * 
     * @type {number}
     * @memberof UpdateServiceRequest
     */
    'cost'?: number;
}
/**
 * 
 * @export
 * @interface UpdateVehicleRequest
 */
export interface UpdateVehicleRequest {
    /**
     * 
     * @type {string}
     * @memberof UpdateVehicleRequest
     */
    'manufacturer'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateVehicleRequest
     */
    'model'?: string;
    /**
     * 
     * @type {number}
     * @memberof UpdateVehicleRequest
     */
    'year'?: number;
    /**
     * 
     * @type {string}
     * @memberof UpdateVehicleRequest
     */
    'registrationNumber'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateVehicleRequest
     */
    'vin'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateVehicleRequest
     */
    'fuelType'?: UpdateVehicleRequestFuelTypeEnum;
    /**
     * 
     * @type {number}
     * @memberof UpdateVehicleRequest
     */
    'displacement'?: number;
}

export const UpdateVehicleRequestFuelTypeEnum = {
    Gasoline: 'GASOLINE',
    Diesel: 'DIESEL',
    Electric: 'ELECTRIC',
    DieselHybrid: 'DIESEL_HYBRID',
    GasolineHybrid: 'GASOLINE_HYBRID',
    Lpg: 'LPG'
} as const;

export type UpdateVehicleRequestFuelTypeEnum = typeof UpdateVehicleRequestFuelTypeEnum[keyof typeof UpdateVehicleRequestFuelTypeEnum];

/**
 * 
 * @export
 * @interface UserAssignmentResponse
 */
export interface UserAssignmentResponse {
    /**
     * 
     * @type {VehicleDto}
     * @memberof UserAssignmentResponse
     */
    'vehicle'?: VehicleDto;
    /**
     * 
     * @type {string}
     * @memberof UserAssignmentResponse
     */
    'startDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserAssignmentResponse
     */
    'endDate'?: string;
}
/**
 * 
 * @export
 * @interface UserDto
 */
export interface UserDto {
    /**
     * 
     * @type {number}
     * @memberof UserDto
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    'username'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    'firstname'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    'lastname'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    'role'?: UserDtoRoleEnum;
    /**
     * 
     * @type {Array<AssignmentDto>}
     * @memberof UserDto
     */
    'assignments'?: Array<AssignmentDto>;
}

export const UserDtoRoleEnum = {
    Admin: 'ADMIN',
    Manager: 'MANAGER',
    Driver: 'DRIVER'
} as const;

export type UserDtoRoleEnum = typeof UserDtoRoleEnum[keyof typeof UserDtoRoleEnum];

/**
 * 
 * @export
 * @interface VehicleDto
 */
export interface VehicleDto {
    /**
     * 
     * @type {number}
     * @memberof VehicleDto
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof VehicleDto
     */
    'manufacturer'?: string;
    /**
     * 
     * @type {string}
     * @memberof VehicleDto
     */
    'model'?: string;
    /**
     * 
     * @type {number}
     * @memberof VehicleDto
     */
    'year'?: number;
    /**
     * 
     * @type {string}
     * @memberof VehicleDto
     */
    'registrationNumber'?: string;
    /**
     * 
     * @type {string}
     * @memberof VehicleDto
     */
    'vin'?: string;
    /**
     * 
     * @type {string}
     * @memberof VehicleDto
     */
    'fuelType'?: VehicleDtoFuelTypeEnum;
    /**
     * 
     * @type {number}
     * @memberof VehicleDto
     */
    'displacement'?: number;
    /**
     * 
     * @type {Array<StatusChangeDto>}
     * @memberof VehicleDto
     */
    'statusChanges'?: Array<StatusChangeDto>;
    /**
     * 
     * @type {Array<RefuelingDto>}
     * @memberof VehicleDto
     */
    'refuelings'?: Array<RefuelingDto>;
    /**
     * 
     * @type {Array<InspectionDto>}
     * @memberof VehicleDto
     */
    'inspections'?: Array<InspectionDto>;
    /**
     * 
     * @type {Array<ServiceDto>}
     * @memberof VehicleDto
     */
    'services'?: Array<ServiceDto>;
    /**
     * 
     * @type {Array<InsuranceDto>}
     * @memberof VehicleDto
     */
    'insurances'?: Array<InsuranceDto>;
    /**
     * 
     * @type {Array<MileageChangeDto>}
     * @memberof VehicleDto
     */
    'mileageChanges'?: Array<MileageChangeDto>;
    /**
     * 
     * @type {Array<AssignmentDto>}
     * @memberof VehicleDto
     */
    'assignments'?: Array<AssignmentDto>;
}

export const VehicleDtoFuelTypeEnum = {
    Gasoline: 'GASOLINE',
    Diesel: 'DIESEL',
    Electric: 'ELECTRIC',
    DieselHybrid: 'DIESEL_HYBRID',
    GasolineHybrid: 'GASOLINE_HYBRID',
    Lpg: 'LPG'
} as const;

export type VehicleDtoFuelTypeEnum = typeof VehicleDtoFuelTypeEnum[keyof typeof VehicleDtoFuelTypeEnum];


/**
 * AdminControllerApi - axios parameter creator
 * @export
 */
export const AdminControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} userId 
         * @param {ChangeUserDataRequest} changeUserDataRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeUserData: async (userId: number, changeUserDataRequest: ChangeUserDataRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('changeUserData', 'userId', userId)
            // verify required parameter 'changeUserDataRequest' is not null or undefined
            assertParamExists('changeUserData', 'changeUserDataRequest', changeUserDataRequest)
            const localVarPath = `/api/v1/admin/changeUserData/{userId}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(changeUserDataRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} userId 
         * @param {ChangeUserRoleRequest} changeUserRoleRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeUserRole: async (userId: number, changeUserRoleRequest: ChangeUserRoleRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('changeUserRole', 'userId', userId)
            // verify required parameter 'changeUserRoleRequest' is not null or undefined
            assertParamExists('changeUserRole', 'changeUserRoleRequest', changeUserRoleRequest)
            const localVarPath = `/api/v1/admin/changeUserRole/{userId}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(changeUserRoleRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreateUserRequest} createUserRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUser: async (createUserRequest: CreateUserRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createUserRequest' is not null or undefined
            assertParamExists('createUser', 'createUserRequest', createUserRequest)
            const localVarPath = `/api/v1/admin/createUser`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createUserRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} assignmentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAssignment: async (assignmentId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'assignmentId' is not null or undefined
            assertParamExists('deleteAssignment', 'assignmentId', assignmentId)
            const localVarPath = `/api/v1/admin/deleteAssignment/{assignmentId}`
                .replace(`{${"assignmentId"}}`, encodeURIComponent(String(assignmentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} inspectionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteInspection: async (inspectionId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'inspectionId' is not null or undefined
            assertParamExists('deleteInspection', 'inspectionId', inspectionId)
            const localVarPath = `/api/v1/admin/deleteInspection/{inspectionId}`
                .replace(`{${"inspectionId"}}`, encodeURIComponent(String(inspectionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} insuranceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteInsurance: async (insuranceId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'insuranceId' is not null or undefined
            assertParamExists('deleteInsurance', 'insuranceId', insuranceId)
            const localVarPath = `/api/v1/admin/deleteInsurance/{insuranceId}`
                .replace(`{${"insuranceId"}}`, encodeURIComponent(String(insuranceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} refuelingId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRefueling: async (refuelingId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'refuelingId' is not null or undefined
            assertParamExists('deleteRefueling', 'refuelingId', refuelingId)
            const localVarPath = `/api/v1/admin/deleteRefueling/{refuelingId}`
                .replace(`{${"refuelingId"}}`, encodeURIComponent(String(refuelingId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} serviceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteService: async (serviceId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'serviceId' is not null or undefined
            assertParamExists('deleteService', 'serviceId', serviceId)
            const localVarPath = `/api/v1/admin/deleteService/{serviceId}`
                .replace(`{${"serviceId"}}`, encodeURIComponent(String(serviceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUser: async (userId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('deleteUser', 'userId', userId)
            const localVarPath = `/api/v1/admin/deleteUser/{userId}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllManagers: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/admin/getAllManagers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllUsers: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/admin/getAllUsers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getManagers: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/admin/getManagers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resetPasswordForUser: async (userId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('resetPasswordForUser', 'userId', userId)
            const localVarPath = `/api/v1/admin/resetPasswordForUser/{userId}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AdminControllerApi - functional programming interface
 * @export
 */
export const AdminControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AdminControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} userId 
         * @param {ChangeUserDataRequest} changeUserDataRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async changeUserData(userId: number, changeUserDataRequest: ChangeUserDataRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.changeUserData(userId, changeUserDataRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminControllerApi.changeUserData']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} userId 
         * @param {ChangeUserRoleRequest} changeUserRoleRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async changeUserRole(userId: number, changeUserRoleRequest: ChangeUserRoleRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.changeUserRole(userId, changeUserRoleRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminControllerApi.changeUserRole']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {CreateUserRequest} createUserRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createUser(createUserRequest: CreateUserRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GeneratedUserCredentialsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createUser(createUserRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminControllerApi.createUser']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} assignmentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteAssignment(assignmentId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteAssignment(assignmentId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminControllerApi.deleteAssignment']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} inspectionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteInspection(inspectionId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteInspection(inspectionId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminControllerApi.deleteInspection']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} insuranceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteInsurance(insuranceId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteInsurance(insuranceId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminControllerApi.deleteInsurance']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} refuelingId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteRefueling(refuelingId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteRefueling(refuelingId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminControllerApi.deleteRefueling']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} serviceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteService(serviceId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteService(serviceId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminControllerApi.deleteService']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteUser(userId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteUser(userId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminControllerApi.deleteUser']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllManagers(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UserDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllManagers(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminControllerApi.getAllManagers']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllUsers(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UserDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllUsers(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminControllerApi.getAllUsers']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getManagers(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UserDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getManagers(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminControllerApi.getManagers']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async resetPasswordForUser(userId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GeneratedUserCredentialsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.resetPasswordForUser(userId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminControllerApi.resetPasswordForUser']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AdminControllerApi - factory interface
 * @export
 */
export const AdminControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AdminControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {number} userId 
         * @param {ChangeUserDataRequest} changeUserDataRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeUserData(userId: number, changeUserDataRequest: ChangeUserDataRequest, options?: RawAxiosRequestConfig): AxiosPromise<UserDto> {
            return localVarFp.changeUserData(userId, changeUserDataRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} userId 
         * @param {ChangeUserRoleRequest} changeUserRoleRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeUserRole(userId: number, changeUserRoleRequest: ChangeUserRoleRequest, options?: RawAxiosRequestConfig): AxiosPromise<UserDto> {
            return localVarFp.changeUserRole(userId, changeUserRoleRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CreateUserRequest} createUserRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUser(createUserRequest: CreateUserRequest, options?: RawAxiosRequestConfig): AxiosPromise<GeneratedUserCredentialsResponse> {
            return localVarFp.createUser(createUserRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} assignmentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAssignment(assignmentId: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteAssignment(assignmentId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} inspectionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteInspection(inspectionId: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteInspection(inspectionId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} insuranceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteInsurance(insuranceId: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteInsurance(insuranceId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} refuelingId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRefueling(refuelingId: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteRefueling(refuelingId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} serviceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteService(serviceId: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteService(serviceId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUser(userId: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteUser(userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllManagers(options?: RawAxiosRequestConfig): AxiosPromise<Array<UserDto>> {
            return localVarFp.getAllManagers(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllUsers(options?: RawAxiosRequestConfig): AxiosPromise<Array<UserDto>> {
            return localVarFp.getAllUsers(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getManagers(options?: RawAxiosRequestConfig): AxiosPromise<Array<UserDto>> {
            return localVarFp.getManagers(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resetPasswordForUser(userId: number, options?: RawAxiosRequestConfig): AxiosPromise<GeneratedUserCredentialsResponse> {
            return localVarFp.resetPasswordForUser(userId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AdminControllerApi - object-oriented interface
 * @export
 * @class AdminControllerApi
 * @extends {BaseAPI}
 */
export class AdminControllerApi extends BaseAPI {
    /**
     * 
     * @param {number} userId 
     * @param {ChangeUserDataRequest} changeUserDataRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminControllerApi
     */
    public changeUserData(userId: number, changeUserDataRequest: ChangeUserDataRequest, options?: RawAxiosRequestConfig) {
        return AdminControllerApiFp(this.configuration).changeUserData(userId, changeUserDataRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} userId 
     * @param {ChangeUserRoleRequest} changeUserRoleRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminControllerApi
     */
    public changeUserRole(userId: number, changeUserRoleRequest: ChangeUserRoleRequest, options?: RawAxiosRequestConfig) {
        return AdminControllerApiFp(this.configuration).changeUserRole(userId, changeUserRoleRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CreateUserRequest} createUserRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminControllerApi
     */
    public createUser(createUserRequest: CreateUserRequest, options?: RawAxiosRequestConfig) {
        return AdminControllerApiFp(this.configuration).createUser(createUserRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} assignmentId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminControllerApi
     */
    public deleteAssignment(assignmentId: number, options?: RawAxiosRequestConfig) {
        return AdminControllerApiFp(this.configuration).deleteAssignment(assignmentId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} inspectionId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminControllerApi
     */
    public deleteInspection(inspectionId: number, options?: RawAxiosRequestConfig) {
        return AdminControllerApiFp(this.configuration).deleteInspection(inspectionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} insuranceId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminControllerApi
     */
    public deleteInsurance(insuranceId: number, options?: RawAxiosRequestConfig) {
        return AdminControllerApiFp(this.configuration).deleteInsurance(insuranceId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} refuelingId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminControllerApi
     */
    public deleteRefueling(refuelingId: number, options?: RawAxiosRequestConfig) {
        return AdminControllerApiFp(this.configuration).deleteRefueling(refuelingId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} serviceId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminControllerApi
     */
    public deleteService(serviceId: number, options?: RawAxiosRequestConfig) {
        return AdminControllerApiFp(this.configuration).deleteService(serviceId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} userId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminControllerApi
     */
    public deleteUser(userId: number, options?: RawAxiosRequestConfig) {
        return AdminControllerApiFp(this.configuration).deleteUser(userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminControllerApi
     */
    public getAllManagers(options?: RawAxiosRequestConfig) {
        return AdminControllerApiFp(this.configuration).getAllManagers(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminControllerApi
     */
    public getAllUsers(options?: RawAxiosRequestConfig) {
        return AdminControllerApiFp(this.configuration).getAllUsers(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminControllerApi
     */
    public getManagers(options?: RawAxiosRequestConfig) {
        return AdminControllerApiFp(this.configuration).getManagers(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} userId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminControllerApi
     */
    public resetPasswordForUser(userId: number, options?: RawAxiosRequestConfig) {
        return AdminControllerApiFp(this.configuration).resetPasswordForUser(userId, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * AllControllerApi - axios parameter creator
 * @export
 */
export const AllControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {ChangePasswordRequest} changePasswordRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changePassword: async (changePasswordRequest: ChangePasswordRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'changePasswordRequest' is not null or undefined
            assertParamExists('changePassword', 'changePasswordRequest', changePasswordRequest)
            const localVarPath = `/api/v1/all/changePassword`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(changePasswordRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMyAssignments: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/all/myAssignments`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} vehicleId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVehicle: async (vehicleId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'vehicleId' is not null or undefined
            assertParamExists('getVehicle', 'vehicleId', vehicleId)
            const localVarPath = `/api/v1/all/getVehicle/{vehicleId}`
                .replace(`{${"vehicleId"}}`, encodeURIComponent(String(vehicleId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} vehicleId 
         * @param {NewRefuelingRequest} newRefuelingRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        newRefueling: async (vehicleId: number, newRefuelingRequest: NewRefuelingRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'vehicleId' is not null or undefined
            assertParamExists('newRefueling', 'vehicleId', vehicleId)
            // verify required parameter 'newRefuelingRequest' is not null or undefined
            assertParamExists('newRefueling', 'newRefuelingRequest', newRefuelingRequest)
            const localVarPath = `/api/v1/all/newRefueling/{vehicleId}`
                .replace(`{${"vehicleId"}}`, encodeURIComponent(String(vehicleId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(newRefuelingRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AllControllerApi - functional programming interface
 * @export
 */
export const AllControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AllControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {ChangePasswordRequest} changePasswordRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async changePassword(changePasswordRequest: ChangePasswordRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.changePassword(changePasswordRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AllControllerApi.changePassword']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMyAssignments(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UserAssignmentResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMyAssignments(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AllControllerApi.getMyAssignments']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} vehicleId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getVehicle(vehicleId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VehicleDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getVehicle(vehicleId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AllControllerApi.getVehicle']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} vehicleId 
         * @param {NewRefuelingRequest} newRefuelingRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async newRefueling(vehicleId: number, newRefuelingRequest: NewRefuelingRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RefuelingDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.newRefueling(vehicleId, newRefuelingRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AllControllerApi.newRefueling']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AllControllerApi - factory interface
 * @export
 */
export const AllControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AllControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {ChangePasswordRequest} changePasswordRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changePassword(changePasswordRequest: ChangePasswordRequest, options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.changePassword(changePasswordRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMyAssignments(options?: RawAxiosRequestConfig): AxiosPromise<Array<UserAssignmentResponse>> {
            return localVarFp.getMyAssignments(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} vehicleId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVehicle(vehicleId: number, options?: RawAxiosRequestConfig): AxiosPromise<VehicleDto> {
            return localVarFp.getVehicle(vehicleId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} vehicleId 
         * @param {NewRefuelingRequest} newRefuelingRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        newRefueling(vehicleId: number, newRefuelingRequest: NewRefuelingRequest, options?: RawAxiosRequestConfig): AxiosPromise<RefuelingDto> {
            return localVarFp.newRefueling(vehicleId, newRefuelingRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AllControllerApi - object-oriented interface
 * @export
 * @class AllControllerApi
 * @extends {BaseAPI}
 */
export class AllControllerApi extends BaseAPI {
    /**
     * 
     * @param {ChangePasswordRequest} changePasswordRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AllControllerApi
     */
    public changePassword(changePasswordRequest: ChangePasswordRequest, options?: RawAxiosRequestConfig) {
        return AllControllerApiFp(this.configuration).changePassword(changePasswordRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AllControllerApi
     */
    public getMyAssignments(options?: RawAxiosRequestConfig) {
        return AllControllerApiFp(this.configuration).getMyAssignments(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} vehicleId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AllControllerApi
     */
    public getVehicle(vehicleId: number, options?: RawAxiosRequestConfig) {
        return AllControllerApiFp(this.configuration).getVehicle(vehicleId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} vehicleId 
     * @param {NewRefuelingRequest} newRefuelingRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AllControllerApi
     */
    public newRefueling(vehicleId: number, newRefuelingRequest: NewRefuelingRequest, options?: RawAxiosRequestConfig) {
        return AllControllerApiFp(this.configuration).newRefueling(vehicleId, newRefuelingRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ManagerControllerApi - axios parameter creator
 * @export
 */
export const ManagerControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} vehicleId 
         * @param {ChangeStatusRequest} changeStatusRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeStatusForVehicle: async (vehicleId: number, changeStatusRequest: ChangeStatusRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'vehicleId' is not null or undefined
            assertParamExists('changeStatusForVehicle', 'vehicleId', vehicleId)
            // verify required parameter 'changeStatusRequest' is not null or undefined
            assertParamExists('changeStatusForVehicle', 'changeStatusRequest', changeStatusRequest)
            const localVarPath = `/api/v1/manager/changeStatusForVehicle/{vehicleId}`
                .replace(`{${"vehicleId"}}`, encodeURIComponent(String(vehicleId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(changeStatusRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreateVehicleRequest} createVehicleRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createVehicle: async (createVehicleRequest: CreateVehicleRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createVehicleRequest' is not null or undefined
            assertParamExists('createVehicle', 'createVehicleRequest', createVehicleRequest)
            const localVarPath = `/api/v1/manager/createVehicle`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createVehicleRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} vehicleId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteVehicle: async (vehicleId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'vehicleId' is not null or undefined
            assertParamExists('deleteVehicle', 'vehicleId', vehicleId)
            const localVarPath = `/api/v1/manager/deleteVehicle/{vehicleId}`
                .replace(`{${"vehicleId"}}`, encodeURIComponent(String(vehicleId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} assignmentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        endAssignment: async (assignmentId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'assignmentId' is not null or undefined
            assertParamExists('endAssignment', 'assignmentId', assignmentId)
            const localVarPath = `/api/v1/manager/endAssignment/{assignmentId}`
                .replace(`{${"assignmentId"}}`, encodeURIComponent(String(assignmentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllAssignments: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/manager/getAllAssignments`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} vehicleId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllCostsForVehicle: async (vehicleId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'vehicleId' is not null or undefined
            assertParamExists('getAllCostsForVehicle', 'vehicleId', vehicleId)
            const localVarPath = `/api/v1/manager/getAllCostsForVehicle`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (vehicleId !== undefined) {
                localVarQueryParameter['vehicleId'] = vehicleId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllInspections: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/manager/getAllInspections`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllInsurances: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/manager/getAllInsurances`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} vehicleId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllInsurancesForVehicle: async (vehicleId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'vehicleId' is not null or undefined
            assertParamExists('getAllInsurancesForVehicle', 'vehicleId', vehicleId)
            const localVarPath = `/api/v1/manager/getAllInsurancesForVehicle/{vehicleId}`
                .replace(`{${"vehicleId"}}`, encodeURIComponent(String(vehicleId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllRefuelings: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/manager/getAllRefuelings`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllServices: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/manager/getAllServices`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllVehicles: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/manager/getAllVehicles`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} assignmentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAssignmentById: async (assignmentId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'assignmentId' is not null or undefined
            assertParamExists('getAssignmentById', 'assignmentId', assignmentId)
            const localVarPath = `/api/v1/manager/getAssignmentById/{assignmentId}`
                .replace(`{${"assignmentId"}}`, encodeURIComponent(String(assignmentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} vehicleId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAssignmentsForVehicle: async (vehicleId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'vehicleId' is not null or undefined
            assertParamExists('getAssignmentsForVehicle', 'vehicleId', vehicleId)
            const localVarPath = `/api/v1/manager/getAssignmentsForVehicle/{vehicleId}`
                .replace(`{${"vehicleId"}}`, encodeURIComponent(String(vehicleId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} costId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCostById: async (costId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'costId' is not null or undefined
            assertParamExists('getCostById', 'costId', costId)
            const localVarPath = `/api/v1/manager/getCostById/{costId}`
                .replace(`{${"costId"}}`, encodeURIComponent(String(costId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCosts: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/manager/getAllCosts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDrivers: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/manager/getDrivers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} inspectionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInspectionById: async (inspectionId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'inspectionId' is not null or undefined
            assertParamExists('getInspectionById', 'inspectionId', inspectionId)
            const localVarPath = `/api/v1/manager/getInspectionById/{inspectionId}`
                .replace(`{${"inspectionId"}}`, encodeURIComponent(String(inspectionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} vehicleId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInspectionsForVehicle: async (vehicleId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'vehicleId' is not null or undefined
            assertParamExists('getInspectionsForVehicle', 'vehicleId', vehicleId)
            const localVarPath = `/api/v1/manager/getInspectionsForVehicle/{vehicleId}`
                .replace(`{${"vehicleId"}}`, encodeURIComponent(String(vehicleId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} insuranceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInsuranceById: async (insuranceId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'insuranceId' is not null or undefined
            assertParamExists('getInsuranceById', 'insuranceId', insuranceId)
            const localVarPath = `/api/v1/manager/getInsuranceById/{insuranceId}`
                .replace(`{${"insuranceId"}}`, encodeURIComponent(String(insuranceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} refuelingId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRefuelingById: async (refuelingId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'refuelingId' is not null or undefined
            assertParamExists('getRefuelingById', 'refuelingId', refuelingId)
            const localVarPath = `/api/v1/manager/getRefuelingById/{refuelingId}`
                .replace(`{${"refuelingId"}}`, encodeURIComponent(String(refuelingId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} vehicleId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRefuelingsForVehicle: async (vehicleId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'vehicleId' is not null or undefined
            assertParamExists('getRefuelingsForVehicle', 'vehicleId', vehicleId)
            const localVarPath = `/api/v1/manager/getRefuelingsForVehicle/{vehicleId}`
                .replace(`{${"vehicleId"}}`, encodeURIComponent(String(vehicleId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} serviceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getServiceById: async (serviceId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'serviceId' is not null or undefined
            assertParamExists('getServiceById', 'serviceId', serviceId)
            const localVarPath = `/api/v1/manager/getServiceById/{serviceId}`
                .replace(`{${"serviceId"}}`, encodeURIComponent(String(serviceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} vehicleId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getServicesForVehicle: async (vehicleId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'vehicleId' is not null or undefined
            assertParamExists('getServicesForVehicle', 'vehicleId', vehicleId)
            const localVarPath = `/api/v1/manager/getServicesForVehicle/{vehicleId}`
                .replace(`{${"vehicleId"}}`, encodeURIComponent(String(vehicleId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserAssignments: async (userId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('getUserAssignments', 'userId', userId)
            const localVarPath = `/api/v1/manager/getUserAssignments/{userId}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} userId 
         * @param {number} vehicleId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        newAssignment: async (userId: number, vehicleId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('newAssignment', 'userId', userId)
            // verify required parameter 'vehicleId' is not null or undefined
            assertParamExists('newAssignment', 'vehicleId', vehicleId)
            const localVarPath = `/api/v1/manager/newAssignment/{userId}/{vehicleId}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)))
                .replace(`{${"vehicleId"}}`, encodeURIComponent(String(vehicleId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} vehicleId 
         * @param {NewInspectionRequest} newInspectionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        newInspection: async (vehicleId: number, newInspectionRequest: NewInspectionRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'vehicleId' is not null or undefined
            assertParamExists('newInspection', 'vehicleId', vehicleId)
            // verify required parameter 'newInspectionRequest' is not null or undefined
            assertParamExists('newInspection', 'newInspectionRequest', newInspectionRequest)
            const localVarPath = `/api/v1/manager/newInspection/{vehicleId}`
                .replace(`{${"vehicleId"}}`, encodeURIComponent(String(vehicleId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(newInspectionRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} vehicleId 
         * @param {NewInsuranceRequest} newInsuranceRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        newInsurance: async (vehicleId: number, newInsuranceRequest: NewInsuranceRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'vehicleId' is not null or undefined
            assertParamExists('newInsurance', 'vehicleId', vehicleId)
            // verify required parameter 'newInsuranceRequest' is not null or undefined
            assertParamExists('newInsurance', 'newInsuranceRequest', newInsuranceRequest)
            const localVarPath = `/api/v1/manager/newInsurance/{vehicleId}`
                .replace(`{${"vehicleId"}}`, encodeURIComponent(String(vehicleId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(newInsuranceRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} vehicleId 
         * @param {NewMileageChangeRequest} newMileageChangeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        newMileage: async (vehicleId: number, newMileageChangeRequest: NewMileageChangeRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'vehicleId' is not null or undefined
            assertParamExists('newMileage', 'vehicleId', vehicleId)
            // verify required parameter 'newMileageChangeRequest' is not null or undefined
            assertParamExists('newMileage', 'newMileageChangeRequest', newMileageChangeRequest)
            const localVarPath = `/api/v1/manager/newMileage/{vehicleId}`
                .replace(`{${"vehicleId"}}`, encodeURIComponent(String(vehicleId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(newMileageChangeRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} vehicleId 
         * @param {NewServiceRequest} newServiceRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        newService: async (vehicleId: number, newServiceRequest: NewServiceRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'vehicleId' is not null or undefined
            assertParamExists('newService', 'vehicleId', vehicleId)
            // verify required parameter 'newServiceRequest' is not null or undefined
            assertParamExists('newService', 'newServiceRequest', newServiceRequest)
            const localVarPath = `/api/v1/manager/newService/{vehicleId}`
                .replace(`{${"vehicleId"}}`, encodeURIComponent(String(vehicleId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(newServiceRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} costId 
         * @param {UpdateCostRequest} updateCostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCost: async (costId: number, updateCostRequest: UpdateCostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'costId' is not null or undefined
            assertParamExists('updateCost', 'costId', costId)
            // verify required parameter 'updateCostRequest' is not null or undefined
            assertParamExists('updateCost', 'updateCostRequest', updateCostRequest)
            const localVarPath = `/api/v1/manager/updateCost/{costId}`
                .replace(`{${"costId"}}`, encodeURIComponent(String(costId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateCostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} inspectionId 
         * @param {UpdateInspectionRequest} updateInspectionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateInspection: async (inspectionId: number, updateInspectionRequest: UpdateInspectionRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'inspectionId' is not null or undefined
            assertParamExists('updateInspection', 'inspectionId', inspectionId)
            // verify required parameter 'updateInspectionRequest' is not null or undefined
            assertParamExists('updateInspection', 'updateInspectionRequest', updateInspectionRequest)
            const localVarPath = `/api/v1/manager/updateInspection/{inspectionId}`
                .replace(`{${"inspectionId"}}`, encodeURIComponent(String(inspectionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateInspectionRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} insuranceId 
         * @param {UpdateInsuranceRequest} updateInsuranceRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateInsurance: async (insuranceId: number, updateInsuranceRequest: UpdateInsuranceRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'insuranceId' is not null or undefined
            assertParamExists('updateInsurance', 'insuranceId', insuranceId)
            // verify required parameter 'updateInsuranceRequest' is not null or undefined
            assertParamExists('updateInsurance', 'updateInsuranceRequest', updateInsuranceRequest)
            const localVarPath = `/api/v1/manager/updateInsurance/{insuranceId}`
                .replace(`{${"insuranceId"}}`, encodeURIComponent(String(insuranceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateInsuranceRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} serviceId 
         * @param {UpdateServiceRequest} updateServiceRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateService: async (serviceId: number, updateServiceRequest: UpdateServiceRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'serviceId' is not null or undefined
            assertParamExists('updateService', 'serviceId', serviceId)
            // verify required parameter 'updateServiceRequest' is not null or undefined
            assertParamExists('updateService', 'updateServiceRequest', updateServiceRequest)
            const localVarPath = `/api/v1/manager/updateService/{serviceId}`
                .replace(`{${"serviceId"}}`, encodeURIComponent(String(serviceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateServiceRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} vehicleId 
         * @param {UpdateVehicleRequest} updateVehicleRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateVehicle: async (vehicleId: number, updateVehicleRequest: UpdateVehicleRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'vehicleId' is not null or undefined
            assertParamExists('updateVehicle', 'vehicleId', vehicleId)
            // verify required parameter 'updateVehicleRequest' is not null or undefined
            assertParamExists('updateVehicle', 'updateVehicleRequest', updateVehicleRequest)
            const localVarPath = `/api/v1/manager/updateVehicle/{vehicleId}`
                .replace(`{${"vehicleId"}}`, encodeURIComponent(String(vehicleId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateVehicleRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ManagerControllerApi - functional programming interface
 * @export
 */
export const ManagerControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ManagerControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} vehicleId 
         * @param {ChangeStatusRequest} changeStatusRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async changeStatusForVehicle(vehicleId: number, changeStatusRequest: ChangeStatusRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ChangeStatusResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.changeStatusForVehicle(vehicleId, changeStatusRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ManagerControllerApi.changeStatusForVehicle']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {CreateVehicleRequest} createVehicleRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createVehicle(createVehicleRequest: CreateVehicleRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VehicleDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createVehicle(createVehicleRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ManagerControllerApi.createVehicle']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} vehicleId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteVehicle(vehicleId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteVehicle(vehicleId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ManagerControllerApi.deleteVehicle']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} assignmentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async endAssignment(assignmentId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AssignmentDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.endAssignment(assignmentId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ManagerControllerApi.endAssignment']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllAssignments(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AssignmentDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllAssignments(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ManagerControllerApi.getAllAssignments']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} vehicleId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllCostsForVehicle(vehicleId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CostDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllCostsForVehicle(vehicleId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ManagerControllerApi.getAllCostsForVehicle']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllInspections(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<InspectionDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllInspections(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ManagerControllerApi.getAllInspections']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllInsurances(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<InsuranceDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllInsurances(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ManagerControllerApi.getAllInsurances']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} vehicleId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllInsurancesForVehicle(vehicleId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<InsuranceDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllInsurancesForVehicle(vehicleId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ManagerControllerApi.getAllInsurancesForVehicle']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllRefuelings(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<RefuelingDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllRefuelings(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ManagerControllerApi.getAllRefuelings']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllServices(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ServiceDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllServices(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ManagerControllerApi.getAllServices']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllVehicles(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<VehicleDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllVehicles(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ManagerControllerApi.getAllVehicles']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} assignmentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAssignmentById(assignmentId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AssignmentDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAssignmentById(assignmentId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ManagerControllerApi.getAssignmentById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} vehicleId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAssignmentsForVehicle(vehicleId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AssignmentDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAssignmentsForVehicle(vehicleId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ManagerControllerApi.getAssignmentsForVehicle']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} costId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCostById(costId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CostDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCostById(costId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ManagerControllerApi.getCostById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCosts(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CostDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCosts(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ManagerControllerApi.getCosts']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDrivers(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UserDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDrivers(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ManagerControllerApi.getDrivers']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} inspectionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getInspectionById(inspectionId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InspectionDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getInspectionById(inspectionId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ManagerControllerApi.getInspectionById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} vehicleId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getInspectionsForVehicle(vehicleId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<InspectionDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getInspectionsForVehicle(vehicleId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ManagerControllerApi.getInspectionsForVehicle']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} insuranceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getInsuranceById(insuranceId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InsuranceDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getInsuranceById(insuranceId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ManagerControllerApi.getInsuranceById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} refuelingId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRefuelingById(refuelingId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RefuelingDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRefuelingById(refuelingId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ManagerControllerApi.getRefuelingById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} vehicleId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRefuelingsForVehicle(vehicleId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<RefuelingDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRefuelingsForVehicle(vehicleId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ManagerControllerApi.getRefuelingsForVehicle']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} serviceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getServiceById(serviceId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getServiceById(serviceId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ManagerControllerApi.getServiceById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} vehicleId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getServicesForVehicle(vehicleId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ServiceDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getServicesForVehicle(vehicleId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ManagerControllerApi.getServicesForVehicle']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserAssignments(userId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UserAssignmentResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserAssignments(userId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ManagerControllerApi.getUserAssignments']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} userId 
         * @param {number} vehicleId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async newAssignment(userId: number, vehicleId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AssignmentDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.newAssignment(userId, vehicleId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ManagerControllerApi.newAssignment']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} vehicleId 
         * @param {NewInspectionRequest} newInspectionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async newInspection(vehicleId: number, newInspectionRequest: NewInspectionRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InspectionDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.newInspection(vehicleId, newInspectionRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ManagerControllerApi.newInspection']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} vehicleId 
         * @param {NewInsuranceRequest} newInsuranceRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async newInsurance(vehicleId: number, newInsuranceRequest: NewInsuranceRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InsuranceDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.newInsurance(vehicleId, newInsuranceRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ManagerControllerApi.newInsurance']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} vehicleId 
         * @param {NewMileageChangeRequest} newMileageChangeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async newMileage(vehicleId: number, newMileageChangeRequest: NewMileageChangeRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MileageChangeDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.newMileage(vehicleId, newMileageChangeRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ManagerControllerApi.newMileage']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} vehicleId 
         * @param {NewServiceRequest} newServiceRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async newService(vehicleId: number, newServiceRequest: NewServiceRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.newService(vehicleId, newServiceRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ManagerControllerApi.newService']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} costId 
         * @param {UpdateCostRequest} updateCostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateCost(costId: number, updateCostRequest: UpdateCostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CostDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateCost(costId, updateCostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ManagerControllerApi.updateCost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} inspectionId 
         * @param {UpdateInspectionRequest} updateInspectionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateInspection(inspectionId: number, updateInspectionRequest: UpdateInspectionRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InspectionDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateInspection(inspectionId, updateInspectionRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ManagerControllerApi.updateInspection']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} insuranceId 
         * @param {UpdateInsuranceRequest} updateInsuranceRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateInsurance(insuranceId: number, updateInsuranceRequest: UpdateInsuranceRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InsuranceDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateInsurance(insuranceId, updateInsuranceRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ManagerControllerApi.updateInsurance']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} serviceId 
         * @param {UpdateServiceRequest} updateServiceRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateService(serviceId: number, updateServiceRequest: UpdateServiceRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateService(serviceId, updateServiceRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ManagerControllerApi.updateService']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} vehicleId 
         * @param {UpdateVehicleRequest} updateVehicleRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateVehicle(vehicleId: number, updateVehicleRequest: UpdateVehicleRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VehicleDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateVehicle(vehicleId, updateVehicleRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ManagerControllerApi.updateVehicle']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ManagerControllerApi - factory interface
 * @export
 */
export const ManagerControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ManagerControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {number} vehicleId 
         * @param {ChangeStatusRequest} changeStatusRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeStatusForVehicle(vehicleId: number, changeStatusRequest: ChangeStatusRequest, options?: RawAxiosRequestConfig): AxiosPromise<ChangeStatusResponse> {
            return localVarFp.changeStatusForVehicle(vehicleId, changeStatusRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CreateVehicleRequest} createVehicleRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createVehicle(createVehicleRequest: CreateVehicleRequest, options?: RawAxiosRequestConfig): AxiosPromise<VehicleDto> {
            return localVarFp.createVehicle(createVehicleRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} vehicleId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteVehicle(vehicleId: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteVehicle(vehicleId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} assignmentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        endAssignment(assignmentId: number, options?: RawAxiosRequestConfig): AxiosPromise<AssignmentDto> {
            return localVarFp.endAssignment(assignmentId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllAssignments(options?: RawAxiosRequestConfig): AxiosPromise<Array<AssignmentDto>> {
            return localVarFp.getAllAssignments(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} vehicleId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllCostsForVehicle(vehicleId: number, options?: RawAxiosRequestConfig): AxiosPromise<Array<CostDto>> {
            return localVarFp.getAllCostsForVehicle(vehicleId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllInspections(options?: RawAxiosRequestConfig): AxiosPromise<Array<InspectionDto>> {
            return localVarFp.getAllInspections(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllInsurances(options?: RawAxiosRequestConfig): AxiosPromise<Array<InsuranceDto>> {
            return localVarFp.getAllInsurances(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} vehicleId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllInsurancesForVehicle(vehicleId: number, options?: RawAxiosRequestConfig): AxiosPromise<Array<InsuranceDto>> {
            return localVarFp.getAllInsurancesForVehicle(vehicleId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllRefuelings(options?: RawAxiosRequestConfig): AxiosPromise<Array<RefuelingDto>> {
            return localVarFp.getAllRefuelings(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllServices(options?: RawAxiosRequestConfig): AxiosPromise<Array<ServiceDto>> {
            return localVarFp.getAllServices(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllVehicles(options?: RawAxiosRequestConfig): AxiosPromise<Array<VehicleDto>> {
            return localVarFp.getAllVehicles(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} assignmentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAssignmentById(assignmentId: number, options?: RawAxiosRequestConfig): AxiosPromise<AssignmentDto> {
            return localVarFp.getAssignmentById(assignmentId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} vehicleId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAssignmentsForVehicle(vehicleId: number, options?: RawAxiosRequestConfig): AxiosPromise<Array<AssignmentDto>> {
            return localVarFp.getAssignmentsForVehicle(vehicleId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} costId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCostById(costId: number, options?: RawAxiosRequestConfig): AxiosPromise<CostDto> {
            return localVarFp.getCostById(costId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCosts(options?: RawAxiosRequestConfig): AxiosPromise<Array<CostDto>> {
            return localVarFp.getCosts(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDrivers(options?: RawAxiosRequestConfig): AxiosPromise<Array<UserDto>> {
            return localVarFp.getDrivers(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} inspectionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInspectionById(inspectionId: number, options?: RawAxiosRequestConfig): AxiosPromise<InspectionDto> {
            return localVarFp.getInspectionById(inspectionId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} vehicleId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInspectionsForVehicle(vehicleId: number, options?: RawAxiosRequestConfig): AxiosPromise<Array<InspectionDto>> {
            return localVarFp.getInspectionsForVehicle(vehicleId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} insuranceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInsuranceById(insuranceId: number, options?: RawAxiosRequestConfig): AxiosPromise<InsuranceDto> {
            return localVarFp.getInsuranceById(insuranceId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} refuelingId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRefuelingById(refuelingId: number, options?: RawAxiosRequestConfig): AxiosPromise<RefuelingDto> {
            return localVarFp.getRefuelingById(refuelingId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} vehicleId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRefuelingsForVehicle(vehicleId: number, options?: RawAxiosRequestConfig): AxiosPromise<Array<RefuelingDto>> {
            return localVarFp.getRefuelingsForVehicle(vehicleId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} serviceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getServiceById(serviceId: number, options?: RawAxiosRequestConfig): AxiosPromise<ServiceDto> {
            return localVarFp.getServiceById(serviceId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} vehicleId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getServicesForVehicle(vehicleId: number, options?: RawAxiosRequestConfig): AxiosPromise<Array<ServiceDto>> {
            return localVarFp.getServicesForVehicle(vehicleId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserAssignments(userId: number, options?: RawAxiosRequestConfig): AxiosPromise<Array<UserAssignmentResponse>> {
            return localVarFp.getUserAssignments(userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} userId 
         * @param {number} vehicleId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        newAssignment(userId: number, vehicleId: number, options?: RawAxiosRequestConfig): AxiosPromise<AssignmentDto> {
            return localVarFp.newAssignment(userId, vehicleId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} vehicleId 
         * @param {NewInspectionRequest} newInspectionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        newInspection(vehicleId: number, newInspectionRequest: NewInspectionRequest, options?: RawAxiosRequestConfig): AxiosPromise<InspectionDto> {
            return localVarFp.newInspection(vehicleId, newInspectionRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} vehicleId 
         * @param {NewInsuranceRequest} newInsuranceRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        newInsurance(vehicleId: number, newInsuranceRequest: NewInsuranceRequest, options?: RawAxiosRequestConfig): AxiosPromise<InsuranceDto> {
            return localVarFp.newInsurance(vehicleId, newInsuranceRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} vehicleId 
         * @param {NewMileageChangeRequest} newMileageChangeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        newMileage(vehicleId: number, newMileageChangeRequest: NewMileageChangeRequest, options?: RawAxiosRequestConfig): AxiosPromise<MileageChangeDto> {
            return localVarFp.newMileage(vehicleId, newMileageChangeRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} vehicleId 
         * @param {NewServiceRequest} newServiceRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        newService(vehicleId: number, newServiceRequest: NewServiceRequest, options?: RawAxiosRequestConfig): AxiosPromise<ServiceDto> {
            return localVarFp.newService(vehicleId, newServiceRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} costId 
         * @param {UpdateCostRequest} updateCostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCost(costId: number, updateCostRequest: UpdateCostRequest, options?: RawAxiosRequestConfig): AxiosPromise<CostDto> {
            return localVarFp.updateCost(costId, updateCostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} inspectionId 
         * @param {UpdateInspectionRequest} updateInspectionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateInspection(inspectionId: number, updateInspectionRequest: UpdateInspectionRequest, options?: RawAxiosRequestConfig): AxiosPromise<InspectionDto> {
            return localVarFp.updateInspection(inspectionId, updateInspectionRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} insuranceId 
         * @param {UpdateInsuranceRequest} updateInsuranceRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateInsurance(insuranceId: number, updateInsuranceRequest: UpdateInsuranceRequest, options?: RawAxiosRequestConfig): AxiosPromise<InsuranceDto> {
            return localVarFp.updateInsurance(insuranceId, updateInsuranceRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} serviceId 
         * @param {UpdateServiceRequest} updateServiceRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateService(serviceId: number, updateServiceRequest: UpdateServiceRequest, options?: RawAxiosRequestConfig): AxiosPromise<ServiceDto> {
            return localVarFp.updateService(serviceId, updateServiceRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} vehicleId 
         * @param {UpdateVehicleRequest} updateVehicleRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateVehicle(vehicleId: number, updateVehicleRequest: UpdateVehicleRequest, options?: RawAxiosRequestConfig): AxiosPromise<VehicleDto> {
            return localVarFp.updateVehicle(vehicleId, updateVehicleRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ManagerControllerApi - object-oriented interface
 * @export
 * @class ManagerControllerApi
 * @extends {BaseAPI}
 */
export class ManagerControllerApi extends BaseAPI {
    /**
     * 
     * @param {number} vehicleId 
     * @param {ChangeStatusRequest} changeStatusRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ManagerControllerApi
     */
    public changeStatusForVehicle(vehicleId: number, changeStatusRequest: ChangeStatusRequest, options?: RawAxiosRequestConfig) {
        return ManagerControllerApiFp(this.configuration).changeStatusForVehicle(vehicleId, changeStatusRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CreateVehicleRequest} createVehicleRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ManagerControllerApi
     */
    public createVehicle(createVehicleRequest: CreateVehicleRequest, options?: RawAxiosRequestConfig) {
        return ManagerControllerApiFp(this.configuration).createVehicle(createVehicleRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} vehicleId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ManagerControllerApi
     */
    public deleteVehicle(vehicleId: number, options?: RawAxiosRequestConfig) {
        return ManagerControllerApiFp(this.configuration).deleteVehicle(vehicleId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} assignmentId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ManagerControllerApi
     */
    public endAssignment(assignmentId: number, options?: RawAxiosRequestConfig) {
        return ManagerControllerApiFp(this.configuration).endAssignment(assignmentId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ManagerControllerApi
     */
    public getAllAssignments(options?: RawAxiosRequestConfig) {
        return ManagerControllerApiFp(this.configuration).getAllAssignments(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} vehicleId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ManagerControllerApi
     */
    public getAllCostsForVehicle(vehicleId: number, options?: RawAxiosRequestConfig) {
        return ManagerControllerApiFp(this.configuration).getAllCostsForVehicle(vehicleId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ManagerControllerApi
     */
    public getAllInspections(options?: RawAxiosRequestConfig) {
        return ManagerControllerApiFp(this.configuration).getAllInspections(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ManagerControllerApi
     */
    public getAllInsurances(options?: RawAxiosRequestConfig) {
        return ManagerControllerApiFp(this.configuration).getAllInsurances(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} vehicleId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ManagerControllerApi
     */
    public getAllInsurancesForVehicle(vehicleId: number, options?: RawAxiosRequestConfig) {
        return ManagerControllerApiFp(this.configuration).getAllInsurancesForVehicle(vehicleId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ManagerControllerApi
     */
    public getAllRefuelings(options?: RawAxiosRequestConfig) {
        return ManagerControllerApiFp(this.configuration).getAllRefuelings(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ManagerControllerApi
     */
    public getAllServices(options?: RawAxiosRequestConfig) {
        return ManagerControllerApiFp(this.configuration).getAllServices(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ManagerControllerApi
     */
    public getAllVehicles(options?: RawAxiosRequestConfig) {
        return ManagerControllerApiFp(this.configuration).getAllVehicles(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} assignmentId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ManagerControllerApi
     */
    public getAssignmentById(assignmentId: number, options?: RawAxiosRequestConfig) {
        return ManagerControllerApiFp(this.configuration).getAssignmentById(assignmentId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} vehicleId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ManagerControllerApi
     */
    public getAssignmentsForVehicle(vehicleId: number, options?: RawAxiosRequestConfig) {
        return ManagerControllerApiFp(this.configuration).getAssignmentsForVehicle(vehicleId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} costId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ManagerControllerApi
     */
    public getCostById(costId: number, options?: RawAxiosRequestConfig) {
        return ManagerControllerApiFp(this.configuration).getCostById(costId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ManagerControllerApi
     */
    public getCosts(options?: RawAxiosRequestConfig) {
        return ManagerControllerApiFp(this.configuration).getCosts(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ManagerControllerApi
     */
    public getDrivers(options?: RawAxiosRequestConfig) {
        return ManagerControllerApiFp(this.configuration).getDrivers(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} inspectionId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ManagerControllerApi
     */
    public getInspectionById(inspectionId: number, options?: RawAxiosRequestConfig) {
        return ManagerControllerApiFp(this.configuration).getInspectionById(inspectionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} vehicleId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ManagerControllerApi
     */
    public getInspectionsForVehicle(vehicleId: number, options?: RawAxiosRequestConfig) {
        return ManagerControllerApiFp(this.configuration).getInspectionsForVehicle(vehicleId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} insuranceId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ManagerControllerApi
     */
    public getInsuranceById(insuranceId: number, options?: RawAxiosRequestConfig) {
        return ManagerControllerApiFp(this.configuration).getInsuranceById(insuranceId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} refuelingId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ManagerControllerApi
     */
    public getRefuelingById(refuelingId: number, options?: RawAxiosRequestConfig) {
        return ManagerControllerApiFp(this.configuration).getRefuelingById(refuelingId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} vehicleId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ManagerControllerApi
     */
    public getRefuelingsForVehicle(vehicleId: number, options?: RawAxiosRequestConfig) {
        return ManagerControllerApiFp(this.configuration).getRefuelingsForVehicle(vehicleId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} serviceId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ManagerControllerApi
     */
    public getServiceById(serviceId: number, options?: RawAxiosRequestConfig) {
        return ManagerControllerApiFp(this.configuration).getServiceById(serviceId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} vehicleId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ManagerControllerApi
     */
    public getServicesForVehicle(vehicleId: number, options?: RawAxiosRequestConfig) {
        return ManagerControllerApiFp(this.configuration).getServicesForVehicle(vehicleId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} userId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ManagerControllerApi
     */
    public getUserAssignments(userId: number, options?: RawAxiosRequestConfig) {
        return ManagerControllerApiFp(this.configuration).getUserAssignments(userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} userId 
     * @param {number} vehicleId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ManagerControllerApi
     */
    public newAssignment(userId: number, vehicleId: number, options?: RawAxiosRequestConfig) {
        return ManagerControllerApiFp(this.configuration).newAssignment(userId, vehicleId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} vehicleId 
     * @param {NewInspectionRequest} newInspectionRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ManagerControllerApi
     */
    public newInspection(vehicleId: number, newInspectionRequest: NewInspectionRequest, options?: RawAxiosRequestConfig) {
        return ManagerControllerApiFp(this.configuration).newInspection(vehicleId, newInspectionRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} vehicleId 
     * @param {NewInsuranceRequest} newInsuranceRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ManagerControllerApi
     */
    public newInsurance(vehicleId: number, newInsuranceRequest: NewInsuranceRequest, options?: RawAxiosRequestConfig) {
        return ManagerControllerApiFp(this.configuration).newInsurance(vehicleId, newInsuranceRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} vehicleId 
     * @param {NewMileageChangeRequest} newMileageChangeRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ManagerControllerApi
     */
    public newMileage(vehicleId: number, newMileageChangeRequest: NewMileageChangeRequest, options?: RawAxiosRequestConfig) {
        return ManagerControllerApiFp(this.configuration).newMileage(vehicleId, newMileageChangeRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} vehicleId 
     * @param {NewServiceRequest} newServiceRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ManagerControllerApi
     */
    public newService(vehicleId: number, newServiceRequest: NewServiceRequest, options?: RawAxiosRequestConfig) {
        return ManagerControllerApiFp(this.configuration).newService(vehicleId, newServiceRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} costId 
     * @param {UpdateCostRequest} updateCostRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ManagerControllerApi
     */
    public updateCost(costId: number, updateCostRequest: UpdateCostRequest, options?: RawAxiosRequestConfig) {
        return ManagerControllerApiFp(this.configuration).updateCost(costId, updateCostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} inspectionId 
     * @param {UpdateInspectionRequest} updateInspectionRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ManagerControllerApi
     */
    public updateInspection(inspectionId: number, updateInspectionRequest: UpdateInspectionRequest, options?: RawAxiosRequestConfig) {
        return ManagerControllerApiFp(this.configuration).updateInspection(inspectionId, updateInspectionRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} insuranceId 
     * @param {UpdateInsuranceRequest} updateInsuranceRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ManagerControllerApi
     */
    public updateInsurance(insuranceId: number, updateInsuranceRequest: UpdateInsuranceRequest, options?: RawAxiosRequestConfig) {
        return ManagerControllerApiFp(this.configuration).updateInsurance(insuranceId, updateInsuranceRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} serviceId 
     * @param {UpdateServiceRequest} updateServiceRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ManagerControllerApi
     */
    public updateService(serviceId: number, updateServiceRequest: UpdateServiceRequest, options?: RawAxiosRequestConfig) {
        return ManagerControllerApiFp(this.configuration).updateService(serviceId, updateServiceRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} vehicleId 
     * @param {UpdateVehicleRequest} updateVehicleRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ManagerControllerApi
     */
    public updateVehicle(vehicleId: number, updateVehicleRequest: UpdateVehicleRequest, options?: RawAxiosRequestConfig) {
        return ManagerControllerApiFp(this.configuration).updateVehicle(vehicleId, updateVehicleRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * PublicControllerApi - axios parameter creator
 * @export
 */
export const PublicControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {AuthenticationRequest} authenticationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login: async (authenticationRequest: AuthenticationRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authenticationRequest' is not null or undefined
            assertParamExists('login', 'authenticationRequest', authenticationRequest)
            const localVarPath = `/api/v1/public/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(authenticationRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PublicControllerApi - functional programming interface
 * @export
 */
export const PublicControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PublicControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {AuthenticationRequest} authenticationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async login(authenticationRequest: AuthenticationRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthenticationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.login(authenticationRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PublicControllerApi.login']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * PublicControllerApi - factory interface
 * @export
 */
export const PublicControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PublicControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {AuthenticationRequest} authenticationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login(authenticationRequest: AuthenticationRequest, options?: RawAxiosRequestConfig): AxiosPromise<AuthenticationResponse> {
            return localVarFp.login(authenticationRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PublicControllerApi - object-oriented interface
 * @export
 * @class PublicControllerApi
 * @extends {BaseAPI}
 */
export class PublicControllerApi extends BaseAPI {
    /**
     * 
     * @param {AuthenticationRequest} authenticationRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicControllerApi
     */
    public login(authenticationRequest: AuthenticationRequest, options?: RawAxiosRequestConfig) {
        return PublicControllerApiFp(this.configuration).login(authenticationRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



